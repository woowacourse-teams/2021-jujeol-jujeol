plugins {
    id 'org.springframework.boot' version '2.5.2' apply false
    id 'io.spring.dependency-management' version '1.0.11.RELEASE' apply false
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id 'org.sonarqube' version '3.3'
    id 'java'
    id 'jacoco'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10" apply false
}

group = 'com.jujeol.'
version = '1.1.0'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

def realSubProjects = subprojects.findAll { it.childProjects.isEmpty() }
def rdsProjects = subprojects.findAll {it.name.endsWith('rds')}
def appProjects = subprojects.findAll {it.name.endsWith('app')}

configure(realSubProjects) {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    dependencies {
        // application
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

        // lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'

        // test
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        // log
        implementation 'net.rakugakibox.spring.boot:logback-access-spring-boot-starter:2.7.1'
        implementation 'org.apache.logging.log4j:log4j-core:2.15.0'
        implementation 'org.apache.logging.log4j:log4j-api:2.15.0'

        // sonarqube
        implementation 'org.springframework.boot:spring-boot-gradle-plugin:2.5.2'
        implementation 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3'
        implementation 'io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE'

        // monitoring tools
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'io.micrometer:micrometer-registry-prometheus'
    }

    test {
        useJUnitPlatform()
    }
}

configure(rdsProjects) {
    apply plugin: "com.ewerk.gradle.plugins.querydsl"

    dependencies {
        runtimeOnly 'com.h2database:h2'
        runtimeOnly 'mysql:mysql-connector-java'
        api 'org.springframework.boot:spring-boot-starter-data-jdbc'
        api 'org.springframework.boot:spring-boot-starter-data-jpa'

        // queryDsl
        api 'com.querydsl:querydsl-jpa'
    }

    //querydsl 추가 시작
    def querydslDir = "$buildDir/generated/querydsl"

    // TODO : 전체 queryDsl 실행시 자동으로 rds queryDsl 실행하도록 수정 필요
    querydsl {
        jpa = true
        querydslSourcesDir = querydslDir
    }

    sourceSets {
        main.java.srcDir querydslDir
    }

    compileQuerydsl {
        options.annotationProcessorPath = configurations.querydsl
    }

    configurations {
        //아래를 지정하지 않으면, compile 로 걸린 JPA 의존성에 접근하지 못한다.
        querydsl.extendsFrom compileClasspath
    }
//querydsl 추가 끝
}

configure(appProjects) {
    apply plugin: 'org.asciidoctor.jvm.convert'

    def subDir = it.name.split('-')[0] + "/" + it.name.split('-')[1]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-web'

        testImplementation 'org.springframework.restdocs:spring-restdocs-restassured'
        testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
        testImplementation 'io.rest-assured:rest-assured:3.3.0'
        testImplementation "io.rest-assured:spring-mock-mvc"
    }

    asciidoctor {
        dependsOn test
    }

    task createDocument(type: Copy) {
        dependsOn asciidoctor
        from ("${asciidoctor.outputDir}/html5") {
            into "static/${subDir}"
        }
    }

    build {
        dependsOn createDocument
    }

    bootJar {
        dependsOn createDocument
    }

    processResources.dependsOn('copySecret')

    task copySecret(type: Copy) {
        from '../../jujeol-auth/application-oauth.yml'
        into 'src/main/resources'

        from '../../jujeol-auth/application-datasource.yml'
        into 'src/main/resources'
    }
}