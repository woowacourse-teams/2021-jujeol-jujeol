plugins {
    id 'org.springframework.boot' version '2.5.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id 'org.sonarqube' version '3.3'
    id 'java'
    id 'jacoco'
}

group = 'com.jujeol.'
version = '1.2.4-beta'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // application
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // database
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.flywaydb:flyway-core:6.4.2'

    // test
    implementation 'com.querydsl:querydsl-jpa'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-restassured'
    testImplementation 'io.rest-assured:rest-assured:3.3.0'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // token encoding
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    // log
    implementation 'net.rakugakibox.spring.boot:logback-access-spring-boot-starter:2.7.1'
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.7.1'

    // sonarqube
    implementation 'org.springframework.boot:spring-boot-gradle-plugin:2.5.2'
    implementation 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3'
    implementation 'io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE'

    // commons
    implementation 'commons-io:commons-io:2.4'

    // file type
    implementation 'org.apache.tika:tika-core:1.26'

    // s3 image upload
    implementation 'com.amazonaws:aws-java-sdk-s3'
    implementation 'org.springframework.cloud:spring-cloud-aws-core:2.2.6.RELEASE'

    // monitoring tools
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'
}

ext {
    snippetsDir = file('build/generated-snippets')
}

processResources.dependsOn('copySecret')

task copySecret(type: Copy) {
    from '../jujeol-auth/application-oauth.yml'
    into 'src/main/resources'

    from '../jujeol-auth/application-datasource.yml'
    into 'src/main/resources'
}

test {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
    }

}

sonarqube {
    properties {
        property "sonar.sources", "src"
        property "sonar.language", "java"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.profile", "Sonar way"
        property "sonar.java.binaries", "${buildDir}/classes"
        property "sonar.test.inclusions", "**/*Test.java"
        property "sonar.exclusions", "**/resources/static/**, **/Q*.class, **/test/**"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}

asciidoctor {
    dependsOn test
    inputs.dir snippetsDir
}

task createDocument(type: Copy) {
    dependsOn asciidoctor
    delete file('src/main/resources/static/index.html')
    from file("build/docs/asciidoc/index.html")
    into file("src/main/resources/static")
}

build {
    dependsOn createDocument
}

bootJar {
    dependsOn createDocument
    from("${asciidoctor.outputDir}") {
        into 'static'
    }
}

//querydsl 추가 시작
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets {
    main.java.srcDir querydslDir
}

configurations {
    //아래를 지정하지 않으면, compile 로 걸린 JPA 의존성에 접근하지 못한다.
    querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}
//querydsl 추가 끝
